include <stdio.h>
void change(int a, int b){
  int temp = a;
  a = b;
  b = a;
}

int main(){
  int a = 5;
  int b = 3;
  change(a,b);
  printf("num a=%d\nnum b=%d\n",a,b);
}














1、形参变量只有在被调用时才分配内存单元，在调用结束时，即刻释放所分配的内存单元。因此，形参只在函数内部有效。函数调用结束返回主调用函数后则不能再使用该形参变量。
2、实参可以是常量、变量、表达式、函数等，无论实参是何种类型的量，在进行函数调用时，它们都必须有确定的值，以便把这些值传送给形参。因此应预先用赋值，输入等办法使参数获得确定值。
3、实参和形参在数量上，类型上、顺序上应严格一致，否则就会发生类型不匹配的错误。
4、在一般传值调用的机制中只能把实参传送给形参，而不能把形参的值反向地传送给实参。因此在函数调用过程中，形参值发生改变，而实参中的值不会变化。而在引用调用的机制当中是将实参引用的地址传递给了形参，所以任何发生在形参上的改变实际上也发生在实参变量上。


不用指针时传递的是值，而使用指针时传递的是地址。使用&是传地址的，*是指针找到地址块

void change(int *a, int *b) { // 函数形参a b 皆为指针类型，调用函数传值时所传为地址

*a=*b
就是把代号为b的地址所存储的数据传到代号为a的地址中  并替换a地址中的原有数据
加了*的为指针变量  可以理解为指引   所谓的变量只是地址名称

*指针变量 取指针所对应的值
&整型变量 取整型所对应的地址

*指针变量 取指针所对应的值
&整型变量 取整型所对应的地址
*p = i;
p = &i;

& 表示取地址符
* 表明这是一个指针变量


若是使用了指针。
a 表示所占用的内存地址值
*a 表示指针内存中保存的具体数值
*a = *b 表示b地址所赋的值替换a地址所赋的值

指针：
声明：  int * <变量名>
赋值：  * <变量名> = VALUE，将VALUE写入<变量名> 所在地址
               * <变量名1> = * <变量名2>，将<变量名2>中的内容写入<变量名1> 所在地址
形参/实参传递：  实参采用  & <变量名>  形式传递


内存最小的单位是1个字节Byte，1个字节Byte=8个二进制位bit

0x表示16进制

一个十六进制的数字，就可以表示4位二进制数字
